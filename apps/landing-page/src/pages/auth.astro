---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Sign In - AuraOS">
  <div class="min-h-screen bg-gradient-to-br from-blue-600/20 via-black to-purple-600/20 flex items-center justify-center px-4 py-12 relative overflow-hidden">
    <!-- Background Effects -->
    <div class="absolute inset-0 overflow-hidden pointer-events-none">
      <div class="absolute top-20 left-10 w-72 h-72 bg-blue-600/10 rounded-full blur-3xl animate-pulse"></div>
      <div class="absolute bottom-20 right-10 w-96 h-96 bg-purple-600/10 rounded-full blur-3xl animate-pulse" style="animation-delay: 1s;"></div>
      <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[600px] h-[600px] bg-cyan-500/5 rounded-full blur-3xl"></div>
    </div>

    <!-- Auth Container -->
    <div class="relative z-10 w-full max-w-md">
      <!-- Logo with Space Theme -->
      <div class="text-center mb-8 animate-fade-in">
        <div class="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-blue-600 to-purple-600 rounded-2xl mb-4 shadow-lg shadow-blue-600/50">
          <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
          </svg>
        </div>
        
        <h1 class="text-3xl font-bold mb-2">
          <span class="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            Welcome to AuraOS
          </span>
        </h1>
        <p class="text-gray-400">Sign in to access your workspace</p>
      </div>

      <!-- Auth Card -->
      <div class="bg-gray-900/80 backdrop-blur-xl rounded-2xl shadow-2xl border border-gray-800 p-8 animate-slide-up">
        
        <div class="relative z-10">
        <!-- Tabs -->
        <div class="flex gap-2 mb-6 bg-black/50 backdrop-blur-sm rounded-xl p-1">
          <button id="signin-tab" class="flex-1 py-2.5 px-4 rounded-lg font-medium transition-all duration-200 text-white bg-gradient-to-r from-blue-600 to-purple-600 shadow-lg shadow-blue-600/30">
            Sign In
          </button>
          <button id="signup-tab" class="flex-1 py-2.5 px-4 rounded-lg font-medium transition-all duration-200 text-gray-400 hover:text-white hover:bg-gray-800">
            Sign Up
          </button>
        </div>

        <!-- Sign In Form -->
        <form id="signin-form" class="space-y-4">
          <div>
            <label for="signin-email" class="block text-sm font-bold text-blue-400 mb-2 drop-shadow-[0_0_5px_rgba(0,255,255,0.5)]">Email</label>
            <input
              type="email"
              id="signin-email"
              class="w-full px-4 py-3 bg-black/50 backdrop-blur-sm border-2 border-blue-500/30 rounded-xl text-white placeholder-gray-400/40 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:shadow-[0_0_15px_rgba(0,255,255,0.5)] transition-all duration-300 hover:border-blue-500/50"
              placeholder="you@example.com"
              required
            />
          </div>
          <div>
            <label for="signin-password" class="block text-sm font-bold text-blue-400 mb-2 drop-shadow-[0_0_5px_rgba(0,255,255,0.5)]">Password</label>
            <input
              type="password"
              id="signin-password"
              class="w-full px-4 py-3 bg-black/50 backdrop-blur-sm border-2 border-blue-500/30 rounded-xl text-white placeholder-gray-400/40 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:shadow-[0_0_15px_rgba(0,255,255,0.5)] transition-all duration-300 hover:border-blue-500/50"
              placeholder="••••••••"
              required
            />
          </div>
          <div class="flex items-center justify-between text-sm">
            <label class="flex items-center text-gray-400 cursor-pointer">
              <input type="checkbox" class="mr-2 rounded border-gray-700 bg-dark/50 text-primary focus:ring-primary focus:ring-offset-0" />
              Remember me
            </label>
            <a href="#" class="text-primary hover:text-primary-light transition-colors">Forgot password?</a>
          </div>
          <button
            type="submit"
            class="relative w-full py-4 px-4 bg-gradient-to-r from-[#ff00ff] via-[#00ffff] to-purple-600 text-black font-black rounded-xl shadow-[0_0_30px_rgba(0,255,255,0.6)] hover:shadow-[0_0_50px_rgba(0,255,255,0.8)] transition-all duration-300 transform hover:scale-[1.02] overflow-hidden group"
          >
            <span class="relative z-10 flex items-center justify-center gap-2 drop-shadow-[0_0_3px_rgba(0,0,0,0.8)]">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="3">
                <path stroke-linecap="round" stroke-linejoin="round" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"></path>
              </svg>
              SIGN IN
            </span>
            <div class="absolute inset-0 bg-gradient-to-r from-[#00ff00] via-[#00ffff] to-[#ff00ff] opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
          </button>
        </form>

        <!-- Sign Up Form (Hidden by default) -->
        <form id="signup-form" class="space-y-4 hidden">
          <div>
            <label for="signup-name" class="block text-sm font-medium text-gray-300 mb-2">Full Name</label>
            <input
              type="text"
              id="signup-name"
              class="w-full px-4 py-3 bg-black/30 backdrop-blur-sm border border-gray-700/50 rounded-xl text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500/50 transition-all duration-300 hover:border-gray-600"
              placeholder="John Doe"
              required
            />
          </div>
          <div>
            <label for="signup-email" class="block text-sm font-medium text-gray-300 mb-2">Email</label>
            <input
              type="email"
              id="signup-email"
              class="w-full px-4 py-3 bg-black/30 backdrop-blur-sm border border-gray-700/50 rounded-xl text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500/50 transition-all duration-300 hover:border-gray-600"
              placeholder="you@example.com"
              required
            />
          </div>
          <div>
            <label for="signup-password" class="block text-sm font-medium text-gray-300 mb-2">Password</label>
            <input
              type="password"
              id="signup-password"
              class="w-full px-4 py-3 bg-black/30 backdrop-blur-sm border border-gray-700/50 rounded-xl text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500/50 transition-all duration-300 hover:border-gray-600"
              placeholder="••••••••"
              required
            />
          </div>
          <div>
            <label for="signup-confirm" class="block text-sm font-medium text-gray-300 mb-2">Confirm Password</label>
            <input
              type="password"
              id="signup-confirm"
              class="w-full px-4 py-3 bg-black/30 backdrop-blur-sm border border-gray-700/50 rounded-xl text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500/50 transition-all duration-300 hover:border-gray-600"
              placeholder="••••••••"
              required
            />
          </div>
          <button
            type="submit"
            class="relative w-full py-4 px-4 bg-gradient-to-r from-purple-600 via-blue-600 to-cyan-600 text-white font-bold rounded-xl hover:shadow-2xl hover:shadow-purple-500/50 transition-all duration-300 transform hover:scale-[1.02] overflow-hidden group"
          >
            <span class="relative z-10 flex items-center justify-center gap-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"></path>
              </svg>
              Create Account
            </span>
            <div class="absolute inset-0 bg-gradient-to-r from-cyan-600 via-blue-600 to-purple-600 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
          </button>
        </form>

        <!-- Divider -->
        <div class="relative my-6">
          <div class="absolute inset-0 flex items-center">
            <div class="w-full border-t border-gray-700"></div>
          </div>
          <div class="relative flex justify-center text-sm">
            <span class="px-4 bg-dark-lighter text-gray-400">Or continue with</span>
          </div>
        </div>

        <!-- Social Login -->
        <div class="space-y-3">
          <button id="google-signin" class="w-full flex items-center justify-center gap-3 py-3.5 px-4 bg-white hover:bg-gray-50 border border-gray-300 rounded-xl text-gray-700 font-semibold transition-all duration-300 transform hover:scale-[1.02] hover:shadow-lg group">
            <svg class="w-5 h-5" viewBox="0 0 24 24">
              <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" fill="#4285F4"/>
              <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" fill="#34A853"/>
              <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" fill="#FBBC05"/>
              <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" fill="#EA4335"/>
            </svg>
            <span>Continue with Google</span>
          </button>
          
          <button id="github-signin" class="w-full flex items-center justify-center gap-3 py-3.5 px-4 bg-gray-900 hover:bg-gray-800 border border-gray-700 rounded-xl text-white font-semibold transition-all duration-300 transform hover:scale-[1.02] hover:shadow-lg hover:shadow-gray-900/50 group">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
            </svg>
            <span>Continue with GitHub</span>
          </button>
          
          <button id="guest-signin" class="w-full flex items-center justify-center gap-3 py-3.5 px-4 bg-black/30 backdrop-blur-sm hover:bg-black/50 border border-gray-700/50 rounded-xl text-gray-300 hover:text-white font-semibold transition-all duration-300 transform hover:scale-[1.02] group">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
            <span>Continue as Guest</span>
          </button>
        </div>
        
        </div>
      </div>

      <!-- Debug Info -->
      <div class="mt-4 p-3 bg-black/50 rounded-xl border border-gray-700 text-xs">
        <div class="flex items-center justify-between mb-2">
          <span class="text-gray-400 font-bold">🔧 Debug Mode</span>
          <button id="test-connection" class="px-3 py-1 bg-gray-800 hover:bg-gray-700 rounded text-gray-300 text-xs font-bold transition-all">
            Test Connection
          </button>
        </div>
        <div id="debug-output" class="text-gray-500 font-mono text-[10px] max-h-32 overflow-y-auto">
          Waiting for actions...
        </div>
      </div>

      <!-- Footer -->
      <p class="text-center text-gray-400 text-sm mt-6 animate-fade-in">
        By continuing, you agree to our <a href="#" class="text-blue-400 hover:text-purple-400 transition-colors">Terms of Service</a> and <a href="#" class="text-blue-400 hover:text-purple-400 transition-colors">Privacy Policy</a>
      </p>
    </div>
  </div>

  <script type="module">
    import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
    import { 
      getAuth, 
      signInWithEmailAndPassword, 
      createUserWithEmailAndPassword,
      signInWithPopup,
      signInAnonymously,
      GoogleAuthProvider,
      GithubAuthProvider
    } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js';

    // Firebase configuration
    const firebaseConfig = {
      apiKey: "AIzaSyBmrG7iMS7hn46IRdRBrYVOd0ZJFTSBvX8",
      authDomain: "auraos-ac2e0.firebaseapp.com",
      projectId: "auraos-ac2e0",
      storageBucket: "auraos-ac2e0.firebasestorage.app",
      messagingSenderId: "53322697327",
      appId: "1:53322697327:web:224560128eb0605c281b9a",
      measurementId: "G-PDPF0MH7L8"
    };

    // Initialize Firebase
    console.log('🔥 Initializing Firebase...');
    console.log('📋 Firebase Config:', {
      apiKey: firebaseConfig.apiKey ? '✓ Present' : '✗ Missing',
      authDomain: firebaseConfig.authDomain,
      projectId: firebaseConfig.projectId,
      storageBucket: firebaseConfig.storageBucket,
      messagingSenderId: firebaseConfig.messagingSenderId ? '✓ Present' : '✗ Missing',
      appId: firebaseConfig.appId ? '✓ Present' : '✗ Missing',
      measurementId: firebaseConfig.measurementId ? '✓ Present' : '✗ Missing'
    });
    
    // Declare variables in outer scope
    let app;
    let auth;
    let googleProvider;
    let githubProvider;
    
    try {
      app = initializeApp(firebaseConfig);
      console.log('✅ Firebase App initialized:', app.name);
      addDebugLog('Firebase App initialized successfully', 'success');
      
      auth = getAuth(app);
      console.log('✅ Firebase Auth initialized');
      console.log('🔐 Auth instance:', {
        currentUser: auth.currentUser,
        config: auth.config
      });
      addDebugLog('Firebase Auth initialized successfully', 'success');
      
      googleProvider = new GoogleAuthProvider();
      githubProvider = new GithubAuthProvider();
      console.log('✅ Auth providers initialized (Google, GitHub)');
      addDebugLog('Auth providers (Google, GitHub) ready', 'success');
      
      // Check if user is already logged in
      auth.onAuthStateChanged((user) => {
        if (user) {
          console.log('👤 User already logged in:', {
            uid: user.uid,
            email: user.email,
            displayName: user.displayName,
            emailVerified: user.emailVerified
          });
          addDebugLog(`User already logged in: ${user.email || 'Guest'}`, 'success');
          
          // Redirect to desktop if already authenticated
          showSuccess('Already logged in! Redirecting...');
          setTimeout(() => window.location.href = '/desktop', 1000);
        } else {
          console.log('👤 No user logged in');
          addDebugLog('No user currently logged in');
        }
      });
      
    } catch (error) {
      console.error('❌ Firebase initialization error:', error);
      addDebugLog(`Firebase init failed: ${error.message}`, 'error');
      showError('Failed to initialize Firebase. Please refresh the page.');
    }

    // Test Connection Button
    const testConnectionBtn = document.getElementById('test-connection');
    testConnectionBtn?.addEventListener('click', async () => {
      addDebugLog('Testing Firebase connection...');
      try {
        addDebugLog(`Project ID: ${firebaseConfig.projectId}`);
        addDebugLog(`Auth Domain: ${firebaseConfig.authDomain}`);
        addDebugLog(`Auth instance: ${auth ? 'OK' : 'FAILED'}`);
        addDebugLog(`Current user: ${auth.currentUser ? auth.currentUser.email : 'None'}`);
        
        // Try to check if auth is working
        const testEmail = 'test@example.com';
        addDebugLog(`Testing with email: ${testEmail}`);
        
        showSuccess('Firebase connection test completed! Check debug log.');
      } catch (error) {
        addDebugLog(`Connection test failed: ${error.message}`, 'error');
        showError('Connection test failed!');
      }
    });

    // Tab switching
    const signinTab = document.getElementById('signin-tab');
    const signupTab = document.getElementById('signup-tab');
    const signinForm = document.getElementById('signin-form');
    const signupForm = document.getElementById('signup-form');

    signinTab?.addEventListener('click', () => {
      signinTab.classList.add('bg-gradient-to-r', 'from-purple-600', 'to-cyan-600', 'text-white', 'shadow-lg', 'shadow-purple-500/30');
      signinTab.classList.remove('text-gray-400', 'hover:bg-gray-800/50');
      signupTab?.classList.remove('bg-gradient-to-r', 'from-purple-600', 'to-cyan-600', 'text-white', 'shadow-lg', 'shadow-purple-500/30');
      signupTab?.classList.add('text-gray-400', 'hover:bg-gray-800/50');
      signinForm?.classList.remove('hidden');
      signupForm?.classList.add('hidden');
    });

    signupTab?.addEventListener('click', () => {
      signupTab.classList.add('bg-gradient-to-r', 'from-purple-600', 'to-cyan-600', 'text-white', 'shadow-lg', 'shadow-purple-500/30');
      signupTab.classList.remove('text-gray-400', 'hover:bg-gray-800/50');
      signinTab?.classList.remove('bg-gradient-to-r', 'from-purple-600', 'to-cyan-600', 'text-white', 'shadow-lg', 'shadow-purple-500/30');
      signinTab?.classList.add('text-gray-400', 'hover:bg-gray-800/50');
      signupForm?.classList.remove('hidden');
      signinForm?.classList.add('hidden');
    });

    // Debug output helper
    function addDebugLog(message, type = 'info') {
      const debugOutput = document.getElementById('debug-output');
      const timestamp = new Date().toLocaleTimeString();
      const icon = type === 'error' ? '❌' : type === 'success' ? '✅' : 'ℹ️';
      const color = type === 'error' ? 'text-red-400' : type === 'success' ? 'text-green-400' : 'text-blue-400';
      debugOutput.innerHTML += `<div class="${color}">[${timestamp}] ${icon} ${message}</div>`;
      debugOutput.scrollTop = debugOutput.scrollHeight;
    }

    // Helper function to show error
    function showError(message) {
      addDebugLog(message, 'error');
      const errorDiv = document.createElement('div');
      errorDiv.className = 'fixed top-4 right-4 bg-red-500/90 backdrop-blur-sm text-white px-6 py-3 rounded-lg shadow-[0_0_20px_rgba(255,0,0,0.5)] z-50 animate-slide-down border-2 border-red-400';
      errorDiv.textContent = message;
      document.body.appendChild(errorDiv);
      setTimeout(() => errorDiv.remove(), 5000);
    }

    // Helper function to show success
    function showSuccess(message) {
      addDebugLog(message, 'success');
      const successDiv = document.createElement('div');
      successDiv.className = 'fixed top-4 right-4 bg-green-500/90 backdrop-blur-sm text-white px-6 py-3 rounded-lg shadow-[0_0_20px_rgba(0,255,0,0.5)] z-50 animate-slide-down border-2 border-green-400';
      successDiv.textContent = message;
      document.body.appendChild(successDiv);
      setTimeout(() => successDiv.remove(), 3000);
    }

    // Sign In with Email/Password
    signinForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const email = document.getElementById('signin-email').value;
      const password = document.getElementById('signin-password').value;
      
      addDebugLog(`Attempting sign in with: ${email}`);
      console.log('🔐 Attempting sign in with email:', email);
      
      try {
        addDebugLog('Calling signInWithEmailAndPassword...');
        const userCredential = await signInWithEmailAndPassword(auth, email, password);
        
        addDebugLog(`Sign in successful! UID: ${userCredential.user.uid}`, 'success');
        console.log('✅ Sign in successful:', userCredential.user);
        
        showSuccess('Welcome back!');
        setTimeout(() => {
          addDebugLog('Redirecting to /desktop...');
          window.location.href = '/desktop';
        }, 1000);
      } catch (error) {
        addDebugLog(`Sign in failed: ${error.code} - ${error.message}`, 'error');
        console.error('❌ Sign in error:', error);
        console.error('Error code:', error.code);
        console.error('Error message:', error.message);
        
        let errorMsg = 'Failed to sign in.';
        if (error.code === 'auth/user-not-found') {
          errorMsg = 'No account found with this email. Please sign up first.';
        } else if (error.code === 'auth/wrong-password') {
          errorMsg = 'Incorrect password. Please try again.';
        } else if (error.code === 'auth/invalid-email') {
          errorMsg = 'Invalid email address.';
        } else if (error.code === 'auth/too-many-requests') {
          errorMsg = 'Too many failed attempts. Please try again later.';
        } else if (error.code === 'auth/operation-not-allowed') {
          errorMsg = '⚠️ Authentication not enabled! Admin needs to enable Email/Password in Firebase Console.';
          addDebugLog('Go to: https://console.firebase.google.com/project/auraos-ac2e0/authentication/providers', 'error');
        } else {
          errorMsg = error.message;
        }
        
        showError(errorMsg);
      }
    });

    // Sign Up with Email/Password
    signupForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const email = document.getElementById('signup-email').value;
      const password = document.getElementById('signup-password').value;
      const confirmPassword = document.getElementById('signup-confirm').value;
      
      console.log('📝 Attempting sign up with email:', email);
      
      if (password !== confirmPassword) {
        console.warn('⚠️ Passwords do not match');
        showError('Passwords do not match!');
        return;
      }

      if (password.length < 6) {
        console.warn('⚠️ Password too short');
        showError('Password must be at least 6 characters long!');
        return;
      }
      
      try {
        const userCredential = await createUserWithEmailAndPassword(auth, email, password);
        console.log('✅ Sign up successful:', userCredential.user);
        showSuccess('Account created successfully!');
        setTimeout(() => window.location.href = '/desktop', 1000);
      } catch (error) {
        addDebugLog(`Sign up failed: ${error.code} - ${error.message}`, 'error');
        console.error('❌ Sign up error:', error);
        console.error('Error code:', error.code);
        console.error('Error message:', error.message);
        
        let errorMsg = 'Failed to create account.';
        if (error.code === 'auth/email-already-in-use') {
          errorMsg = 'This email is already registered. Please sign in instead.';
        } else if (error.code === 'auth/invalid-email') {
          errorMsg = 'Invalid email address.';
        } else if (error.code === 'auth/weak-password') {
          errorMsg = 'Password is too weak. Use at least 6 characters.';
        } else if (error.code === 'auth/operation-not-allowed') {
          errorMsg = '⚠️ Authentication not enabled! Admin needs to enable Email/Password in Firebase Console.';
          addDebugLog('Go to: https://console.firebase.google.com/project/auraos-ac2e0/authentication/providers', 'error');
        } else {
          errorMsg = error.message;
        }
        
        showError(errorMsg);
      }
    });

    // Google Sign In
    const googleSigninBtn = document.getElementById('google-signin');
    googleSigninBtn?.addEventListener('click', async () => {
      console.log('🔵 Attempting Google sign in...');
      try {
        const result = await signInWithPopup(auth, googleProvider);
        console.log('✅ Google sign in successful:', result.user);
        showSuccess('Welcome! Signed in with Google');
        setTimeout(() => window.location.href = '/desktop', 1000);
      } catch (error) {
        addDebugLog(`Google sign in failed: ${error.code} - ${error.message}`, 'error');
        console.error('❌ Google sign in error:', error);
        console.error('Error code:', error.code);
        console.error('Error message:', error.message);
        
        let errorMsg = 'Failed to sign in with Google.';
        if (error.code === 'auth/operation-not-allowed') {
          errorMsg = '⚠️ Google Sign-In not enabled! Admin needs to enable Google provider in Firebase Console.';
          addDebugLog('Go to: https://console.firebase.google.com/project/auraos-ac2e0/authentication/providers', 'error');
        } else if (error.code === 'auth/popup-closed-by-user') {
          errorMsg = 'Sign-in popup was closed. Please try again.';
        } else if (error.code === 'auth/cancelled-popup-request') {
          errorMsg = 'Sign-in was cancelled.';
        } else {
          errorMsg = error.message;
        }
        
        showError(errorMsg);
      }
    });
    
    // GitHub Sign In
    const githubSigninBtn = document.getElementById('github-signin');
    githubSigninBtn?.addEventListener('click', async () => {
      console.log('⚫ Attempting GitHub sign in...');
      try {
        const result = await signInWithPopup(auth, githubProvider);
        console.log('✅ GitHub sign in successful:', result.user);
        showSuccess('Welcome! Signed in with GitHub');
        setTimeout(() => window.location.href = '/desktop', 1000);
      } catch (error) {
        addDebugLog(`GitHub sign in failed: ${error.code} - ${error.message}`, 'error');
        console.error('❌ GitHub sign in error:', error);
        console.error('Error code:', error.code);
        console.error('Error message:', error.message);
        
        let errorMsg = 'Failed to sign in with GitHub.';
        if (error.code === 'auth/operation-not-allowed') {
          errorMsg = '⚠️ GitHub Sign-In not enabled! Admin needs to enable GitHub provider in Firebase Console.';
          addDebugLog('Go to: https://console.firebase.google.com/project/auraos-ac2e0/authentication/providers', 'error');
        } else if (error.code === 'auth/popup-closed-by-user') {
          errorMsg = 'Sign-in popup was closed. Please try again.';
        } else if (error.code === 'auth/cancelled-popup-request') {
          errorMsg = 'Sign-in was cancelled.';
        } else {
          errorMsg = error.message;
        }
        
        showError(errorMsg);
      }
    });
    
    // Guest Sign In (Anonymous)
    const guestSigninBtn = document.getElementById('guest-signin');
    guestSigninBtn?.addEventListener('click', async () => {
      console.log('👤 Attempting anonymous guest sign in...');
      addDebugLog('Starting anonymous authentication...', 'info');
      try {
        const userCredential = await signInAnonymously(auth);
        console.log('✅ Anonymous guest signed in:', userCredential.user);
        addDebugLog('Anonymous authentication successful', 'success');
        
        // Store guest status in localStorage
        localStorage.setItem('isGuest', 'true');
        localStorage.setItem('guestUid', userCredential.user.uid);
        
        showSuccess('Welcome, Guest! Exploring AuraOS...');
        setTimeout(() => window.location.href = '/desktop', 1000);
      } catch (error) {
        addDebugLog(`Anonymous sign in failed: ${error.code} - ${error.message}`, 'error');
        console.error('❌ Anonymous guest sign in error:', error);
        console.error('Error code:', error.code);
        console.error('Error message:', error.message);
        
        let errorMsg = 'Failed to create guest session.';
        if (error.code === 'auth/operation-not-allowed') {
          errorMsg = '⚠️ Guest Mode requires Anonymous authentication to be enabled in Firebase Console.';
          addDebugLog('Enable Anonymous auth at: https://console.firebase.google.com/project/auraos-ac2e0/authentication/providers', 'error');
        } else {
          errorMsg = error.message;
        }
        
        showError(errorMsg);
      }
    });
  </script>

  <style>
    /* Space Background Stars */
    .stars, .stars2, .stars3 {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
    }

    .stars {
      background: transparent url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="2" height="2"><circle cx="1" cy="1" r="0.5" fill="%2300ffff" opacity="0.9"/></svg>') repeat;
      animation: animateStars 100s linear infinite;
      filter: drop-shadow(0 0 2px #00ffff);
    }

    .stars2 {
      background: transparent url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="3" height="3"><circle cx="1.5" cy="1.5" r="0.8" fill="%23ff00ff" opacity="0.8"/></svg>') repeat;
      animation: animateStars 150s linear infinite;
      filter: drop-shadow(0 0 2px #ff00ff);
    }

    .stars3 {
      background: transparent url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="4" height="4"><circle cx="2" cy="2" r="0.6" fill="%2300ff00" opacity="0.7"/></svg>') repeat;
      animation: animateStars 200s linear infinite;
      filter: drop-shadow(0 0 2px #00ff00);
    }

    @keyframes animateStars {
      from { transform: translateY(0px); }
      to { transform: translateY(-2000px); }
    }

    @keyframes animate-float {
      0%, 100% { transform: translateY(0px); }
      50% { transform: translateY(-20px); }
    }

    .animate-float {
      animation: animate-float 6s ease-in-out infinite;
    }

    @keyframes spin-slow {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }

    @keyframes spin-reverse {
      from { transform: rotate(360deg); }
      to { transform: rotate(0deg); }
    }

    .animate-spin-slow {
      animation: spin-slow 20s linear infinite;
    }

    .animate-spin-reverse {
      animation: spin-reverse 15s linear infinite;
    }

    @keyframes gradient {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }

    .animate-gradient {
      background-size: 200% 200%;
      animation: gradient 3s ease infinite;
    }

    @keyframes fade-in {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .animate-fade-in {
      animation: fade-in 0.6s ease-out;
    }

    @keyframes slide-up {
      from { opacity: 0; transform: translateY(30px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .animate-slide-up {
      animation: slide-up 0.8s ease-out;
    }

    @keyframes slide-down {
      from { opacity: 0; transform: translateY(-20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .animate-slide-down {
      animation: slide-down 0.4s ease-out;
    }
  </style>
</Layout>
