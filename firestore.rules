rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && 
        // Prevent users from modifying their own subscription data
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['subscription']));
      allow delete: if false; // Users cannot delete themselves
      
      // Usage subcollection - only Cloud Functions can write
      match /usage/{document=**} {
        allow read: if isOwner(userId);
        allow write: if false;
      }
    }
    
    // Subscriptions collection - only Cloud Functions can write
    match /subscriptions/{userId} {
      allow read: if isOwner(userId);
      allow write: if false;
    }
    
    // Content generations log - only Cloud Functions can write
    match /content_generations/{generationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow write: if false;
    }
    
    // Projects collection
    match /projects/{projectId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        resource.data.owner == request.auth.uid;
    }
    
    // Workflows collection
    match /workflows/{workflowId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        resource.data.owner == request.auth.uid;
    }
    
    // Public data
    match /public/{document=**} {
      allow read: if true;
      allow write: if false;
    }
    
    // Notes collection
    match /notes/{noteId} {
      function hasPermission(noteData, permission) {
        return isAuthenticated() && (
          request.auth.uid == noteData.userId ||
          (noteData.collaboration != null && 
           noteData.collaboration.permissions[request.auth.uid] == permission) ||
          (noteData.collaboration != null && 
           noteData.collaboration.permissions[request.auth.uid] == 'admin')
        );
      }
      
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        hasPermission(resource.data, 'view') ||
        hasPermission(resource.data, 'edit') ||
        hasPermission(resource.data, 'admin')
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        hasPermission(resource.data, 'edit') ||
        hasPermission(resource.data, 'admin')
      );
      
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        hasPermission(resource.data, 'admin')
      );
    }
    
    // Folders collection
    match /folders/{folderId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId);
    }
    
    // Tags collection
    match /tags/{tagId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId);
    }
    
    // Knowledge graph collection
    match /graph_nodes/{nodeId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId);
    }
  }
}
