/**
 * Web Summarizer Workflow
 * Quantum Workflow for summarizing web content and saving to notes
 */

import { QuantumWorkflowBuilder } from '../quantum/quantum-workflow-builder';
import { WorkflowStep } from '../quantum/types';

export class WebSummarizerWorkflow {
  /**
   * Define the summarize-webpage-to-note workflow
   */
  static defineWorkflow(): WorkflowStep[] {
    return new QuantumWorkflowBuilder()
      .setName('summarize-webpage-to-note')
      .setDescription('Fetch web content, summarize it with AI, and save to notes')
      .setVersion('1.0.0')
      .setCategory('ai-notes')
      .setTags(['web', 'summarization', 'ai', 'notes'])
      
      // Step 1: Fetch and clean web content
      .addStep({
        id: 'fetch-content',
        name: 'Fetch Web Content',
        description: 'Fetch and clean content from the provided URL',
        tool: 'web.fetchAndCleanContent',
        input: {
          url: '{{input.url}}',
          includeMetadata: true,
          maxContentLength: 50000,
        },
        output: {
          title: '{{fetch-content.title}}',
          content: '{{fetch-content.content}}',
          url: '{{fetch-content.url}}',
          wordCount: '{{fetch-content.wordCount}}',
          readingTime: '{{fetch-content.readingTime}}',
          metadata: '{{fetch-content.metadata}}',
        },
        retryPolicy: {
          maxAttempts: 3,
          backoffMs: 1000,
        },
        timeout: 30000,
      })
      
      // Step 2: Summarize content with AI
      .addStep({
        id: 'summarize-content',
        name: 'Summarize Content',
        description: 'Use AI to create a concise summary of the web content',
        tool: 'ai.summarizeText',
        input: {
          text: '{{fetch-content.content}}',
          title: '{{fetch-content.title}}',
          maxLength: 1000,
          style: 'professional',
          includeKeyPoints: true,
        },
        output: {
          summary: '{{summarize-content.summary}}',
          keyPoints: '{{summarize-content.keyPoints}}',
          sentiment: '{{summarize-content.sentiment}}',
          confidence: '{{summarize-content.confidence}}',
        },
        dependencies: ['fetch-content'],
        retryPolicy: {
          maxAttempts: 2,
          backoffMs: 2000,
        },
        timeout: 60000,
      })
      
      // Step 3: Create note with summary
      .addStep({
        id: 'create-note',
        name: 'Create Note',
        description: 'Save the summarized content as a new note',
        tool: 'notes.createNote',
        input: {
          title: '{{fetch-content.title}} - Summary',
          content: `# {{fetch-content.title}}

**Source:** [{{fetch-content.title}}]({{fetch-content.url}})
**Reading Time:** {{fetch-content.readingTime}} minutes
**Word Count:** {{fetch-content.wordCount}} words

## Summary
{{summarize-content.summary}}

## Key Points
{{summarize-content.keyPoints}}

## Metadata
- **Author:** {{fetch-content.metadata.author || 'Unknown'}}
- **Published:** {{fetch-content.metadata.publishedDate || 'Unknown'}}
- **Sentiment:** {{summarize-content.sentiment}}
- **Confidence:** {{summarize-content.confidence}}%

---
*Generated by AuraOS Web Summarizer on {{new Date().toISOString()}}*`,
          tags: ['web-summary', 'ai-generated', '{{fetch-content.url}}'],
          folder: 'Web Summaries',
          metadata: {
            sourceUrl: '{{fetch-content.url}}',
            originalTitle: '{{fetch-content.title}}',
            wordCount: '{{fetch-content.wordCount}}',
            readingTime: '{{fetch-content.readingTime}}',
            aiConfidence: '{{summarize-content.confidence}}',
            generatedAt: new Date().toISOString(),
          },
        },
        output: {
          noteId: '{{create-note.noteId}}',
          noteTitle: '{{create-note.title}}',
          noteUrl: '{{create-note.url}}',
        },
        dependencies: ['fetch-content', 'summarize-content'],
        retryPolicy: {
          maxAttempts: 2,
          backoffMs: 1000,
        },
        timeout: 10000,
      })
      
      .build();
  }

  /**
   * Get workflow configuration
   */
  static getConfig() {
    return {
      name: 'summarize-webpage-to-note',
      displayName: 'Web Page Summarizer',
      description: 'Automatically fetch, summarize, and save web content to your notes',
      icon: 'üåê',
      category: 'ai-notes',
      version: '1.0.0',
      author: 'AuraOS Team',
      tags: ['web', 'summarization', 'ai', 'notes'],
      inputs: [
        {
          name: 'url',
          type: 'string',
          required: true,
          description: 'URL of the webpage to summarize',
          validation: {
            pattern: '^https?://.+',
            message: 'Please provide a valid HTTP or HTTPS URL',
          },
        },
        {
          name: 'maxSummaryLength',
          type: 'number',
          required: false,
          default: 1000,
          description: 'Maximum length of the summary in characters',
          validation: {
            min: 100,
            max: 5000,
          },
        },
        {
          name: 'includeMetadata',
          type: 'boolean',
          required: false,
          default: true,
          description: 'Include metadata like author and publish date',
        },
      ],
      outputs: [
        {
          name: 'noteId',
          type: 'string',
          description: 'ID of the created note',
        },
        {
          name: 'noteTitle',
          type: 'string',
          description: 'Title of the created note',
        },
        {
          name: 'summary',
          type: 'string',
          description: 'AI-generated summary of the content',
        },
        {
          name: 'keyPoints',
          type: 'array',
          description: 'Key points extracted from the content',
        },
      ],
      permissions: {
        required: ['web:fetch', 'ai:summarize', 'notes:create'],
        optional: ['notes:read', 'notes:update'],
      },
      rateLimits: {
        maxExecutionsPerHour: 10,
        maxExecutionsPerDay: 50,
      },
      errorHandling: {
        onFailure: 'retry',
        maxRetries: 3,
        retryDelay: 5000,
        fallbackAction: 'notify-user',
      },
    };
  }

  /**
   * Validate workflow inputs
   */
  static validateInputs(inputs: Record<string, any>): { valid: boolean; errors: string[] } {
    const errors: string[] = [];

    // Validate URL
    if (!inputs.url) {
      errors.push('URL is required');
    } else {
      try {
        const url = new URL(inputs.url);
        if (!['http:', 'https:'].includes(url.protocol)) {
          errors.push('URL must use HTTP or HTTPS protocol');
        }
      } catch {
        errors.push('URL must be a valid URL');
      }
    }

    // Validate maxSummaryLength
    if (inputs.maxSummaryLength !== undefined) {
      if (typeof inputs.maxSummaryLength !== 'number' || inputs.maxSummaryLength < 100 || inputs.maxSummaryLength > 5000) {
        errors.push('maxSummaryLength must be a number between 100 and 5000');
      }
    }

    // Validate includeMetadata
    if (inputs.includeMetadata !== undefined && typeof inputs.includeMetadata !== 'boolean') {
      errors.push('includeMetadata must be a boolean');
    }

    return {
      valid: errors.length === 0,
      errors,
    };
  }

  /**
   * Get workflow execution statistics
   */
  static async getStats(): Promise<{
    totalExecutions: number;
    successRate: number;
    averageExecutionTime: number;
    lastExecution?: Date;
  }> {
    // This would typically query the database for workflow statistics
    // For now, return mock data
    return {
      totalExecutions: 0,
      successRate: 0,
      averageExecutionTime: 0,
    };
  }
}

// Export the workflow definition
export const webSummarizerWorkflow = WebSummarizerWorkflow.defineWorkflow();
export const webSummarizerConfig = WebSummarizerWorkflow.getConfig();
